# GlobalPlanner:
#   lethal_cost: 253 #
#   neutral_cost: 1 #
#   cost_factor: 1 # Factor to multiply each cost from costmap by
#   visualize_potential: false # Sgpecifies whether or not to visualize the potential area computed via a PointCloud2.
#   publish_potential: false # Publish Potential Costmap
#   orientation_mode: 1 # None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6
#   orientation_window_size: 1 # What window to use to determine the orientation based on the position derivative specified by the orientation mode
#   old_navfn_behavior: false # If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true
#   use_grid_path: false # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
#   use_quadratic: true # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
#   use_dijkstra: false # If true, use dijkstra's algorithm. Otherwise, A*.
#   default_tolerance: 1 # A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away
#   allow_unknown: false # Specifies whether or not to allow the planner to create plans that traverse unknown space. NOTE: if you are using a layered costmap_2d costmap with a voxel or obstacle layer, you must also set the track_unknown_space param for that layer to be true, or it will convert all your unknown space to free space (which planner will then happily go right through).
#   outline_map: false # true/false
#   controller_frequency: 20


base_global_planner: navfn/NavfnROS
base_local_planner:  base_local_planner/TrajectoryPlannerROS

  
planner_frequency:          0     # Global plan updates on new goal or path blocked only
controller_frequency:       5   #10
# planner_patience:           5.0
# controller_patience:        3.0
# conservative_reset_dist:    2.0
recovery_behavior_enabled:  false
clearing_rotation_allowed:  false
# recovery_behaviors: [{name: rotate_recovery, type: rotate_recovery/RotateRecovery}]
# shutdown_costmaps:          false
# oscillation_timeout:        0.0
# oscillation_distance:       0.5



########################################## global plan navfn ###########################

NavfnROS:
  allow_unknown:         false 
  use_dijkstra:          false
  use_quadratic:         false
  use_grid_path:         false
  old_navfn_behavior:    false 
  visualize_potential:   false
  cost_factor:           0.0
  neutral_cost:           50 #66
  lethal_cost:           100 #255  
  planner_frequency:     0.0 #planner only run when path is blocked or new goal is set


  
  
########################################## local plan TrajectoryPlannerROS ###########################
TrajectoryPlannerROS:

  # Robot Configuration Parameters
  acc_lim_x: 5.01 #10.0
  acc_lim_y: 5.01 #10.0
  acc_lim_theta:  5.01

  max_vel_x: 1.5  #0.5
  min_vel_x: -1.5  #0.1
#  max_vel_y: 5.5  #0.5
#  min_vel_y: -5.0  #0.1


  max_vel_theta: 5.57
  min_vel_theta: -5.57
  min_in_place_vel_theta: 0.314

  holonomic_robot: false
  escape_vel: -0.5

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 6.2832 # 2pi
  xy_goal_tolerance: 0.5
  # latch_xy_goal_tolerance: false

  # # Forward Simulation Parameters
  sim_time: 2.0
  # sim_granularity: 0.02
  # angular_sim_granularity: 0.02
  # vx_samples: 6
  # vtheta_samples: 20
  # controller_frequency: 20.0

  # # Trajectory scoring parameters
  meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
  # occdist_scale:  0.005 #0.1 The weighting for how much the controller should attempt to avoid obstacles. default 0.01 /0.1 good result
  path_distance_bias: 0.4  # 0.4    The weighting for how much the controller should stay close to the path it was given . default 0.6
  goal_distance_bias: 0.1 # 0.8    The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8

  # heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
  # heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
  # heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
  # dwa: false #Whether to use the Dynamic Window Approach (DWA) or whether to use Trajectory Rollout
  # simple_attractor: false
  # publish_cost_grid_pc: true

  # #Oscillation Prevention Parameters
  # oscillation_reset_dist: 0.05 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
  # escape_reset_dist: 0.1
  # escape_reset_theta: 0.1